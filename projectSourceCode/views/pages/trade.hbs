<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Trade Stocks</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .trade-container {
            display: flex;
            gap: 2rem;
            padding: 1rem;
        }
        .trade-form, .holdings-section {
            flex: 1;
        }
        .trade-form {
            background: var(--surface);
            padding: 1rem;
            border-radius: 8px;
        }
        .form-group {
            margin-bottom: 1rem;
        }
        .holdings-table {
            width: 100%;
            border-collapse: collapse;
        }
        .holdings-table th, .holdings-table td {
            color: var(--text-primary);
            padding: 0.5rem;
            border: 1px solid #dee2e6;
        }
        .error-message {
            color: #dc3545;
            margin-top: 0.5rem;
        }
        .success-message {
            color: #198754;
            margin-top: 0.5rem;
        }
        .balance-info {
            margin-bottom: 1rem;
            padding: 0.5rem;
            background: var(--background);
            border-radius: 4px;
        }
        /* BEGIN ADDITION: Estimated Price styling */
        .estimated-group {
            margin-top: 1rem;
            font-weight: bold;
            font-size: 1.1rem;
        }
        #estimatedPrice {
            margin-top: 0.25rem;
            color: var(--text-primary);
        }
        /* END ADDITION */
        
        /* Market status indicator */
        .market-status {
            padding: 0.5rem;
            margin-bottom: 1rem;
            border-radius: 4px;
            font-weight: bold;
        }
        .market-open {
            background-color: rgba(25, 135, 84, 0.15);
            color: #198754;
        }
        .market-closed {
            background-color: rgba(108, 117, 125, 0.15);
            color: #6c757d;
        }
        
        /* Pending orders section */
        .pending-orders {
            margin-top: 2rem;
        }
        .pending-orders-table {
            width: 100%;
            border-collapse: collapse;
        }
        .pending-orders-table th, .pending-orders-table td {
            color: var(--text-primary);
            padding: 0.5rem;
            border: 1px solid #dee2e6;
        }
        .pending-badge {
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
        }
        .badge-pending {
            background-color: #ffc107;
            color: #212529;
        }
        .badge-executed {
            background-color: #198754;
            color: white;
        }
        .badge-failed {
            background-color: #dc3545;
            color: white;
        }
        .badge-processing {
            background-color: #0d6efd;
            color: white;
        }
        .badge-cancelled {
            background-color: #6c757d;
            color: white;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1>Trade Stocks</h1>
        
        <div class="balance-info">
            <strong>Current Balance:</strong> $<span id="userBalance">{{user.balance}}</span>
        </div>
        
        <div id="marketStatusContainer" class="market-status"></div>

        <div class="trade-container">
            <div class="trade-form">
                <h2>Place Trade</h2>
                <form id="tradeForm">
                    <div class="form-group">
                        <label for="symbol">Stock Symbol:</label>
                        <input type="text" id="symbol" name="symbol" class="form-control" required 
                               value="{{symbol}}" {{#if symbol}}readonly{{/if}}>
                    </div>
                    
                    <div class="form-group">
                        <label for="quantity">Quantity:</label>
                        <input type="number" id="quantity" name="quantity" class="form-control" 
                               min="0.01" step="0.01" required>
                        <small class="color: var(--text-primary);">Min: 0.01 shares</small>
                    </div>
                    
                    <!-- BEGIN ADDITION: Estimated Price display -->
                    <div class="form-group estimated-group">
                        <label>Estimated Price:</label>
                        <div id="estimatedPrice">—</div>
                    </div>
                    <!-- END ADDITION -->

                    <div class="form-group">
                        <label for="tradeType">Trade Type:</label>
                        <select id="tradeType" name="tradeType" class="form-control" required>
                            <option value="BUY">Buy</option>
                            <option value="SELL">Sell</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Place Order</button>
                    </div>
                    
                    <div id="tradeMessage"></div>
                </form>
            </div>
            
            <div class="holdings-section">
                <h2>Your Holdings</h2>
                <table class="holdings-table">
                    <thead>
                        <tr>
                            <th>Symbol</th>
                            <th>Company</th>
                            <th>Quantity</th>
                            <th>Current Price</th>
                            <th>Total Value</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="holdingsTableBody">
                        <!-- Holdings will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="pending-orders">
            <h2>Pending Orders</h2>
            <p id="noPendingOrders">You have no pending orders.</p>
            <table class="pending-orders-table" id="pendingOrdersTable" style="display: none;">
                <thead>
                    <tr>
                        <th>Symbol</th>
                        <th>Type</th>
                        <th>Quantity</th>
                        <th>Estimated Price</th>
                        <th>Submitted</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="pendingOrdersTableBody">
                    <!-- Pending orders will be populated here -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Initialize user data from server -->
    <script>
        // Debug: Log user data from server
        console.log('User data from server:', {
            user_id: "{{user.user_id}}",
            balance: "{{user.balance}}",
            username: "{{user.username}}"
        });

        const user = {
            user_id: "{{user.user_id}}",
            balance: parseFloat("{{user.balance}}") || 0,
            username: "{{user.username}}"
        };
        
        // Market state
        let isMarketOpen = false;
    </script>

    <script>
        // Check market status
        async function checkMarketStatus() {
            try {
                const response = await fetch('/api/market-status');
                if (!response.ok) {
                    console.error(`Market status check failed: ${response.status} ${response.statusText}`);
                    // Set a fallback market status indicator when the API fails
                    const statusContainer = document.getElementById('marketStatusContainer');
                    statusContainer.className = 'market-status market-closed';
                    statusContainer.innerHTML = '⚠️ Unable to check market status - Trading available but orders may be queued';
                    return false;
                }
                
                const data = await response.json();
                
                isMarketOpen = data.isOpen;
                const statusContainer = document.getElementById('marketStatusContainer');
                
                if (isMarketOpen) {
                    statusContainer.className = 'market-status market-open';
                    statusContainer.innerHTML = '✅ Market is OPEN - Orders will execute immediately';
                } else {
                    statusContainer.className = 'market-status market-closed';
                    statusContainer.innerHTML = '⏰ Market is CLOSED - Orders will be queued for execution when market opens';
                }
                
                return isMarketOpen;
            } catch (error) {
                console.error('Error checking market status:', error);
                // Set a fallback market status indicator when the API fails
                const statusContainer = document.getElementById('marketStatusContainer');
                statusContainer.className = 'market-status market-closed';
                statusContainer.innerHTML = '⚠️ Unable to check market status - Trading available but orders may be queued';
                return false;
            }
        }
        
        // Fetch the current price for a symbol
        async function fetchCurrentPrice(symbol) {
            try {
                const res = await fetch(`/api/price/${symbol}`);
                if (!res.ok) throw new Error('Price fetch failed');
                const data = await res.json();
                return parseFloat(data.price);
            } catch (err) {
                console.error('Error fetching price:', err);
                return null;
            }
        }

        // Update the Estimated Price display
        async function updateEstimatedPrice() {
            const symbol = document.getElementById('symbol').value.trim().toUpperCase();
            const qty    = parseFloat(document.getElementById('quantity').value);
            const priceEl = document.getElementById('estimatedPrice');

            if (!symbol || isNaN(qty) || qty <= 0) {
                priceEl.textContent = '—';
                return;
            }
            const currentPrice = await fetchCurrentPrice(symbol);
            if (currentPrice === null) {
                priceEl.textContent = 'N/A';
                return;
            }
            const amount = currentPrice * qty;
            priceEl.textContent = `$${amount.toFixed(2)}`;
        }

        // Hook events to update estimate
        document.getElementById('symbol').addEventListener('change', updateEstimatedPrice);
        document.getElementById('quantity').addEventListener('input', updateEstimatedPrice);
        document.getElementById('tradeType').addEventListener('change', updateEstimatedPrice);
    </script>

    <script>
        // Load pending orders for the user
        async function loadPendingOrders() {
            try {
                const response = await fetch(`/api/pending-orders/${user.user_id}`);
                if (!response.ok) throw new Error('Failed to fetch pending orders');
                const orders = await response.json();
                
                const tableBody = document.getElementById('pendingOrdersTableBody');
                const table = document.getElementById('pendingOrdersTable');
                const noOrdersMessage = document.getElementById('noPendingOrders');
                
                tableBody.innerHTML = '';
                
                if (orders.length === 0) {
                    table.style.display = 'none';
                    noOrdersMessage.style.display = 'block';
                    return;
                }
                
                table.style.display = 'table';
                noOrdersMessage.style.display = 'none';
                
                orders.forEach(order => {
                    const row = document.createElement('tr');
                    
                    // Format the date
                    const createdDate = new Date(order.created_at);
                    const formattedDate = createdDate.toLocaleString();
                    
                    // Determine status badge class
                    let badgeClass = '';
                    switch (order.status) {
                        case 'PENDING': badgeClass = 'badge-pending'; break;
                        case 'EXECUTED': badgeClass = 'badge-executed'; break;
                        case 'FAILED': badgeClass = 'badge-failed'; break;
                        case 'PROCESSING': badgeClass = 'badge-processing'; break;
                        case 'CANCELLED': badgeClass = 'badge-cancelled'; break;
                        default: badgeClass = 'badge-pending';
                    }
                    
                    // Build action buttons based on status
                    let actionButtons = '';
                    if (order.status === 'PENDING') {
                        actionButtons = `
                            <button class="btn btn-sm btn-danger" 
                                    onclick="cancelOrder('${order.order_id}')">
                                Cancel
                            </button>
                        `;
                    }
                    
                    row.innerHTML = `
                        <td>${order.symbol}</td>
                        <td>${order.order_type}</td>
                        <td>${order.quantity.toFixed(4)}</td>
                        <td>$${order.price_at_creation.toFixed(2)}</td>
                        <td>${formattedDate}</td>
                        <td><span class="pending-badge ${badgeClass}">${order.status}</span></td>
                        <td>${actionButtons}</td>
                    `;
                    
                    tableBody.appendChild(row);
                });
                
            } catch (error) {
                console.error('Error loading pending orders:', error);
            }
        }
        
        // Function to cancel a pending order (placeholder for now)
        async function cancelOrder(orderId) {
            if (!confirm('Are you sure you want to cancel this order?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/cancel-order/${orderId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (!response.ok) throw new Error('Failed to cancel order');
                
                alert('Order cancelled successfully');
                
                // Refresh the pending orders list
                loadPendingOrders();
                
                // Refresh user balance
                await fetchUserBalance();
                
            } catch (error) {
                console.error('Error cancelling order:', error);
                alert(`Error cancelling order: ${error.message}`);
            }
        }
        
        // Function to load user's holdings
        async function loadHoldings() {
            console.log('Loading holdings for user:', user.user_id);
            try {
                const response = await fetch(`/api/holdings/${user.user_id}`);
                console.log('Holdings response:', response.status);
                const holdings = await response.json();
                console.log('Holdings data:', holdings);
                
                const tableBody = document.getElementById('holdingsTableBody');
                tableBody.innerHTML = '';
                
                holdings.forEach(holding => {
                    const row = document.createElement('tr');
                    const totalValue = holding.quantity * holding.last_price;
                    
                    row.innerHTML = `
                        <td>${holding.symbol}</td>
                        <td>${holding.company_name}</td>
                        <td>${parseFloat(holding.quantity).toFixed(4)}</td>
                        <td>$${parseFloat(holding.last_price).toFixed(2)}</td>
                        <td>$${totalValue.toFixed(2)}</td>
                        <td>
                            <button class="btn btn-sm btn-danger" 
                                    onclick="prefillSell('${holding.symbol}', ${holding.quantity})">
                                Sell
                            </button>
                        </td>
                    `;
                    
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading holdings:', error);
                document.getElementById('holdingsTableBody').innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center text-danger">
                            Error loading holdings: ${error.message}
                        </td>
                    </tr>
                `;
            }
        }

        // Function to prefill sell order
        function prefillSell(symbol, quantity) {
            document.getElementById('symbol').value = symbol;
            document.getElementById('quantity').value = quantity;
            document.getElementById('tradeType').value = 'SELL';
            document.getElementById('symbol').scrollIntoView({ behavior: 'smooth' });
        }
        
        // Fetch user balance
        async function fetchUserBalance() {
            try {
                const balanceResponse = await fetch(`/api/user/${user.user_id}/balance`);
                if (!balanceResponse.ok) throw new Error('Failed to fetch balance');
                
                const balanceData = await balanceResponse.json();
                
                document.getElementById('userBalance').textContent = 
                    parseFloat(balanceData.balance).toFixed(2);
                
                // Update local user object
                user.balance = parseFloat(balanceData.balance);
                
                return balanceData.balance;
            } catch (error) {
                console.error('Error fetching user balance:', error);
                return null;
            }
        }

        // Function to handle trade submission
        document.getElementById('tradeForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            console.log('Form submitted');
            
            const messageDiv = document.getElementById('tradeMessage');
            messageDiv.innerHTML = '';
            
            const formData = {
                user_id: user.user_id,
                symbol: document.getElementById('symbol').value.toUpperCase(),
                quantity: parseFloat(document.getElementById('quantity').value),
                trade_type: document.getElementById('tradeType').value
            };
            
            console.log('Submitting trade:', formData);
            
            try {
                const response = await fetch('/api/trade', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(formData)
                });
                
                console.log('Trade response status:', response.status);
                const result = await response.json();
                console.log('Trade response:', result);
                
                if (response.ok) {
                    let successMessage = `
                        <div class="success-message">
                            ${result.message}<br>
                            Price: $${result.price.toFixed(2)}<br>
                            Total: $${result.total.toFixed(2)}
                        </div>
                    `;
                    
                    if (result.pending) {
                        successMessage += `
                            <div class="mt-2">
                                <strong>Note:</strong> This order will be executed when the market opens.
                                You can view and manage your pending orders below.
                            </div>
                        `;
                    }
                    
                    messageDiv.innerHTML = successMessage;
                    
                    // Refresh holdings, pending orders, and user balance
                    await loadHoldings();
                    await loadPendingOrders();
                    await fetchUserBalance();
                    
                    // Reset form if not a pre-filled symbol
                    if (!document.getElementById('symbol').readOnly) {
                        document.getElementById('symbol').value = '';
                    }
                    document.getElementById('quantity').value = '';
                    // Reset estimate after trade
                    updateEstimatedPrice();
                } else {
                    messageDiv.innerHTML = `
                        <div class="error-message">
                            ${result.error}
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Trade error:', error);
                messageDiv.innerHTML = `
                    <div class="error-message">
                        An error occurred while processing your trade: ${error.message}
                    </div>
                `;
            }
        });

        // Load everything when page loads
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('Page loaded, initializing...');
            
            // Check market status first
            await checkMarketStatus();
            
            // Then load holdings and pending orders
            await loadHoldings();
            await loadPendingOrders();
        });
    </script>
</body>
</html>
